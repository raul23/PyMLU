#!/usr/bin/env python
"""TODO
"""
import argparse
import glob
import os
from shutil import copy, copy2

import pyutils
from pyutils.default_configs import __path__ as default_configs_path
from pyutils.default_scripts import __path__ as default_scripts_path
from pyutils.genutils import mkdir, copy_files
from pyutils.mlutils import _SKLEARN_MODULES
default_configs_path = default_configs_path[0]
default_scripts_path = default_scripts_path[0]

_CONFIGS_DIRNAME = 'configs'
_MODEL_CONFIGS_DIRNAME = 'model_configs'
_MODEL_FNAME_ENDING = '_config.py'


def copy_model_configs(categories, overwrite=False):
    # Path to the configs directory in the current working directory
    configs_path = os.path.join(os.getcwd(), _CONFIGS_DIRNAME)
    # Path to the model_configs directory in the current working directory
    model_configs_path = os.path.join(configs_path, _MODEL_CONFIGS_DIRNAME)
    for i, cat in enumerate(categories):
        if i != 0:
            print()
        # Validate the model category provided by the user
        if cat not in _SKLEARN_MODULES:
            print(f"The category '{cat}' is invalid")
            print(f"Skipping it!\n")
            continue
        # Path to the default category (e.g. ensemble) directory
        default_cat_path = os.path.join(default_configs_path, _MODEL_CONFIGS_DIRNAME, cat)
        # Path to the category directory in the current working directory
        cat_path = os.path.join(model_configs_path, cat)
        print(f"Category: {cat} @ {cat_path}")
        # Create the category folder (empty) if it doesn't exist
        mkdir(cat_path)
        # Copy the model configuration files (.py) for the given category
        copy_files(default_cat_path, cat_path, (1, 37), '*.py', overwrite)


def setup_argparser():
    """Setup the argument parser for the command-line script.

    TODO

    Returns
    -------
    parser : argparse.ArgumentParser
        Argument parser.

    """
    # Setup the parser
    parser = argparse.ArgumentParser(
        # usage="%(prog)s [OPTIONS]",
        # prog=os.path.basename(__file__),
        description='''\
Initialize the current working directory with the scripts (e.g. train_model.py) 
and the configuration folder containing the model and logging configuration 
files.\n''',
        # formatter_class=argparse.RawDescriptionHelpFormatter)
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    # TODO: package name too? instead of program name (e.g. train_model.py)
    parser.add_argument("--version", action='version',
                        version='%(prog)s {}'.format(pyutils.__version__))
    parser.add_argument(
        "-l", "--list-categories", dest="list_categories", action='store_true',
        help='''Show a list of all the supported ML model categories along with
        associated model names. Then the program exits.''')
    parser.add_argument(
        "-o", "--overwrite", dest="overwrite", action='store_true',
        help='''Overwrite existing files and folders generated from a previous
        run of the script.''')
    parser.add_argument(
        "-c", "--categories", dest="categories", nargs="*",
        help='''Categories of ML models for which configuration files will be 
        generated. These correspond to sklearn packages of ML models, e.g. 
        ensemble or linear_model. Use the -l argument to show a complete list
        of the categories of ML models.''')
    parser.add_argument(
        "-m", "--models", dest="models", nargs="*",
        help='''Names of ML models for which configuration files will be 
        generated. These correspond to sklearn's classes of ML models, e.g. 
        SVC or AdaBoostClassifier. Use the -l argument to show a complete 
        list of the supported ML models.''')
    return parser


def main():
    parser = setup_argparser()
    args = parser.parse_args()
    # ---------------------------------------------------------
    # -l : list model categories and their associated ML models
    # ---------------------------------------------------------
    if args.list_categories:
        print("***List of model categories and the associated ML models:***")
        for i, module in enumerate(_SKLEARN_MODULES, start=1):
            spaces = '  ' if i < 10 else ' '
            # e.g. (1)  ensemble
            print(f"({i}){spaces}{module}:")
            # Path to the sklearn module directory
            module_path = os.path.join(default_configs_path, _MODEL_CONFIGS_DIRNAME, module)
            # For each sklearn module, print its associated model names
            # Get all python files (model config files) under the sklearn module directory
            for fp in glob.glob(os.path.join(module_path, '*.py')):
                # Retrieve the model name from the python config filename
                # e.g. DummyClassifier.py -> DummyClassifier
                model_name = os.path.basename(fp).split(_MODEL_FNAME_ENDING)[0]
                print(f"\t- {model_name}")
        return 0

    # ------------------------------------------------
    # Copy the default configuration folders and files
    # ------------------------------------------------
    print("***Copying the configuration folders and files***")
    # Path to the configs directory in the current working directory
    configs_path = os.path.join(os.getcwd(), _CONFIGS_DIRNAME)
    # Create the configs folder (empty) if it doesn't exist
    mkdir(configs_path, (12, 12))
    # Path to the model_configs directory in the current working directory
    model_configs_path = os.path.join(configs_path, _MODEL_CONFIGS_DIRNAME)
    # Create the model_configs folder (empty) if it doesn't exist
    mkdir(model_configs_path)
    print()
    # Copy configuration and logging files (.py): config.py and logging.py
    copy_files(default_configs_path, configs_path, (23, 11), '*.py', args.overwrite)
    print()
    # -------------------------------------------------------------
    # -c : copy the model configs for the selected model categories
    # -------------------------------------------------------------
    if args.categories:
        copy_model_configs(args.categories, args.overwrite)
    else:
        print("**All model categories selected**\n")
        copy_model_configs(_SKLEARN_MODULES, args.overwrite)
    # ------------------------
    # Copy the default scripts
    # ------------------------
    print("\n***Copying the scripts***")
    copy_files(default_scripts_path, os.getcwd(), (1, 15), '*.py', args.overwrite)
    return 0


if __name__ == '__main__':
    main()
