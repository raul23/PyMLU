#!/usr/bin/env python
"""TODO
"""
import argparse
import os
from pathlib import Path
from shutil import copy

import pyutils
from pyutils import (CONFIGS_DIRNAME, MODEL_CONFIGS_DIRNAME, SKLEARN_MODULES)
from pyutils.default_configs import __path__ as default_configs_dirpath
from pyutils.default_scripts import __path__ as default_scripts_dirpath
from pyutils.genutils import (copy_files, get_model_config_filepaths,
                              list_model_categories_and_names, mkdir)
# TODO: call function from genutils
default_configs_dirpath = default_configs_dirpath[0]
default_scripts_dirpath = default_scripts_dirpath[0]


def copy_model_configs(categories, model_type=None, model_names=None, overwrite=False):
    if model_type:
        assert model_type in ['clf', 'reg'], f"Invalid model type: {model_type}"
        model_type = 'classifiers' if model_type == 'clf' else 'regressors'
    if model_names is None:
        model_names = []
    # Path to the model_configs directory in the current working directory
    model_configs_dirpath = os.path.join(os.getcwd(), CONFIGS_DIRNAME,
                                         MODEL_CONFIGS_DIRNAME)
    # Path to the default model_configs directory
    default_model_configs_dirpath = os.path.join(default_configs_dirpath,
                                                 MODEL_CONFIGS_DIRNAME)
    model_config_filepaths = get_model_config_filepaths(
        default_model_configs_dirpath, categories, model_type, model_names, '.py')
    for model_filepath in model_config_filepaths:
        fname = os.path.basename(model_filepath)
        model_type_dirpath = os.path.dirname(model_filepath)
        model_type_dirname = os.path.basename(model_type_dirpath)
        model_category_dirname = os.path.basename(os.path.dirname(model_type_dirpath))
        dest_dirpath = os.path.join(model_configs_dirpath, model_category_dirname,
                                    model_type_dirname)
        dest = os.path.join(dest_dirpath, fname)
        if os.path.exists(dest) and not overwrite:
            print(f"{'File ' + fname + ' exists':10s}: {model_filepath}")
            print(f"Skipping it!")
            continue
        else:
            print(f"Copying {fname:10s} to {dest}")
            Path(dest_dirpath).mkdir(parents=True, exist_ok=True)
            copy(model_filepath, dest)


def setup_argparser():
    """Setup the argument parser for the command-line script.

    TODO

    Returns
    -------
    parser : argparse.ArgumentParser
        Argument parser.

    """
    # Setup the parser
    parser = argparse.ArgumentParser(
        # usage="%(prog)s [OPTIONS]",
        # prog=os.path.basename(__file__),
        description='''\
Initialize the current working directory with the scripts (e.g. train_model.py) 
and the configuration folder containing the model and logging configuration 
files.\n''',
        # formatter_class=argparse.RawDescriptionHelpFormatter)
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    # TODO: package name too? instead of program name (e.g. train_model.py)
    parser.add_argument("--version", action='version',
                        version='%(prog)s {}'.format(pyutils.__version__))
    parser.add_argument(
        "-l", "--list-categories", dest="list_categories", action='store_true',
        help='''Show a list of all the supported ML model categories. Then
                the program exits.''')
    parser.add_argument(
        "-lm", "--list-models", dest="list_models", action='store_true',
        help='''Show a list of all the supported ML models. Then the
                program exits.''')
    parser.add_argument(
        "-o", "--overwrite", dest="overwrite", action='store_true',
        help='''Overwrite existing files and folders generated from a previous
        run of the script.''')
    parser.add_argument(
        "-c", "--categories", dest="categories", nargs="*",
        help='''Categories of ML models for which configuration files will be
        generated. These correspond to sklearn packages of ML models, e.g.
        ensemble or linear_model. Use the -l argument to show a complete list
        of the categories of ML models.''')
    parser.add_argument(
        "-m", "--models", dest="models", nargs="*",
        help='''Names of ML models for which configuration files will be
        generated. These correspond to sklearn classes of ML models, e.g.
        SVC or AdaBoostClassifier. Use the -l argument to show a complete
        list of the supported ML models.''')
    parser.add_argument(
        "-t", "--model_type", dest="model_type", choices=['clf', 'reg'],
        default=None,
        help='''The type of model for which configuration files will be
        generated where `clf` is for classifier and `reg` is for regressor.''')
    return parser


def main():
    parser = setup_argparser()
    args = parser.parse_args()
    # ---------------------------------------------------------
    # -l : list model categories and their associated ML models
    # ---------------------------------------------------------
    if args.list_categories:
        list_model_categories_and_names(show_all=False)
        return 0

    if args.list_models:
        list_model_categories_and_names()
        return 0

    # ------------------------------------------------
    # Copy the default configuration folders and files
    # ------------------------------------------------
    print("***Copying the configuration folders and files***")
    # Path to the configs directory in the current working directory
    configs_dirpath = os.path.join(os.getcwd(), CONFIGS_DIRNAME)
    # Create the configs folder (empty) if it doesn't exist
    mkdir(configs_dirpath, (12, 12))
    # Path to the model_configs directory in the current working directory
    model_configs_dirpath = os.path.join(configs_dirpath, MODEL_CONFIGS_DIRNAME)
    # Create the model_configs folder (empty) if it doesn't exist
    mkdir(model_configs_dirpath)
    print()
    # Copy configuration and logging files (.py): config.py and logging.py
    copy_files(default_configs_dirpath, configs_dirpath, (23, 11), '*.py',
               args.overwrite)
    print()
    # -----------------------------------------------------------------------------------
    # -c -t -m: copy the model configs for the selected model categories, types and names
    # -----------------------------------------------------------------------------------
    if args.categories:
        categories = args.categories
    else:
        print("**All model categories selected**\n")
        categories = SKLEARN_MODULES
    copy_model_configs(categories, args.model_type, args.models, args.overwrite)
    # ------------------------
    # Copy the default scripts
    # ------------------------
    print("\n***Copying the scripts***")
    copy_files(default_scripts_dirpath, os.getcwd(), (27, 15), '*.py', args.overwrite)
    return 0


if __name__ == '__main__':
    main()
