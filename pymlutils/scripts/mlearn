#!/usr/bin/env python
"""TODO
"""
import argparse
import sys

import pymlutils
from pymlutils.genutils import (dict_to_bunch, get_config_dict,
                                get_default_config_dict, init_log,
                                list_model_info, setup_log)

logger = init_log(__name__, __file__)
CWD_NOT_READY_MSG = "The current working directory is not initialized"


def get_main_config():
    cwd_ready = is_cwd_ready()
    # -------------------------------------
    # Get config filepath and setup logging
    # -------------------------------------
    if cwd_ready:
        # Get config dict
        main_cfg_dict = get_config_dict('main')
    else:
        # Get default config dict
        main_cfg_dict = get_default_config_dict('main')
    main_cfg = dict_to_bunch(main_cfg_dict)
    setup_log(not cwd_ready, main_cfg.quiet, main_cfg.verbose)
    return main_cfg, cwd_ready


# Check the current working directory if it has already been initialized
# TODO: is it robust enough?
def is_cwd_ready():
    try:
        cwd_ready = True
        from mlconfigs import config
    except ImportError:
        cwd_ready = False
    return cwd_ready


# ---------------------
# Sub-command functions
# ---------------------

# Init cwd with configuration files and modules
def parse_init_args(args, main_cfg, cwd_ready):
    return 0


# Data exploration
def parse_data_args(args, main_cfg, cwd_ready):
    if cwd_ready:
        from mlmodules import explore_data
        explore_data.explore(main_cfg)
    else:
        print(CWD_NOT_READY_MSG)
    return 0


# Edit configuration files
def parse_edit_args(args, main_cfg, cwd_ready):
    return 0


# List model categories and names
def parse_list_args(args, cwd_ready):
    if args.list_categories:
        if cwd_ready:
            list_model_info(show_all=False)
        else:
            print(CWD_NOT_READY_MSG)

    if args.list_models:
        if cwd_ready:
            list_model_info()
        else:
            print(CWD_NOT_READY_MSG)

    if args.list_all_categories:
        list_model_info(cwd_ready=False, show_all=False)

    if args.list_all_models:
        list_model_info(cwd_ready=False)

    return 0


# Train models
def parse_train_args(args, main_cfg, cwd_ready):
    """
    from mlmodules import train_models
    train_models.train([main_cfg])
    """
    return 0


def setup_argparser():
    """Setup the argument parser for the command-line script.

    Returns
    -------
    parser : argparse.ArgumentParser
        Argument parser.

    """
    # Setup the parser
    parser = argparse.ArgumentParser(
        description='''\
This program can perform the following tasks:
* initialize the cwd with a configuration folder and modules (init)
* perform data exploration (data)
* edit a file (edit)
* list the installed model categories and names (list) 
* train models (train)

Each of these tasks is associated with a subcommand (name within
parentheses).
''',
        formatter_class=argparse.RawDescriptionHelpFormatter)
    # ===============
    # General options
    # ===============
    # TODO: package name too? instead of program name (e.g. train_models.py)
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s v{}'.format(pymlutils.__version__))
    subparsers = parser.add_subparsers(
        title='subcommands', description=None, dest='subparser_name',
        help=None)
    # ====================================
    # Initialize current working directory
    # ====================================
    # create the parser for the "init" command
    parser_init = subparsers.add_parser('init',
        help='''Initialize the current working directory with the configuration
        folder and the modules for doing data exploration and training models.
        IMPORTANT: if no other arguments is provided then all configuration
        files will be generated.''')
    parser_init.add_argument(
        '-c', dest='init_categories', nargs='+', metavar='CATEGORY',
        help=f'''Categories of ML models for which configuration files will be
        generated in the current working directory. These correspond to sklearn
        packages of ML models, e.g. ensemble or linear_model. Use the
        subcommand 'list -C' to show a complete list of all the supported
        categories of ML models found in {pymlutils.__name__}.''')
    parser_init.add_argument(
        '-m', dest='init_models', nargs='+', metavar='MODEL',
        help=f'''Names of ML models for which configuration files will be
        generated in the current working directory. These correspond to sklearn
        classes of ML models, e.g. SVC or AdaBoostClassifier. Use the
        subcommand 'list -M' to show a complete list of all the supported ML
        models found in {pymlutils.__name__}. It also accepts model name
        abbreviations (e.g. ABC for AdaBoostClassifier) as shown in the list.
        ''')
    parser_init.add_argument(
        '-t', dest='init_type', choices=['clf', 'reg'], default=None,
        help='''The type of model for which configuration files will be
        generated in the current working directory where 'clf' is for
        classifier and 'reg' is for regressor''')
    parser_init.add_argument(
        '-o', dest='overwrite', action='store_true',
        help='''Overwrite existing files and folders generated from a previous
        run of the program''')
    # ================
    # Data exploration
    # ================
    # create the parser for the "data" command
    parser_data = subparsers.add_parser('data',
        help='''Perform data exploration of a dataset as defined in the main
        configuration file (config.py)''')
    parser_data.set_defaults(func=parse_data_args)
    # ==========
    # Edit files
    # ==========
    # create the parser for the "edit" command
    parser_edit = subparsers.add_parser(
        'edit', help='''Edit a configuration file or module''')
    parser_edit.add_argument(
        'filename',
        help='''Name of a file to edit which can either be the main
        configuration file ('config'), logging configuration file ('log'), a
        particular model configuration file (e.g. LogisticRegression) or a
        module ({'explore_data', 'train_models'}). It also accepts model name
        abbreviations as shown in the list of ML models ('list -m').''')
    parser_edit.add_argument(
        '--app', metavar='NAME',
        required='-e' in sys.argv or '--edit' in sys.argv,
        help='''Name of the application to use for editing the file. If no name
        is given, then the default application for opening this type of file
        will be used.''')
    # ===============================
    # List model categories and names
    # ===============================
    # create the parser for the "list" command
    parser_list = subparsers.add_parser(
        'list', help='''List model categories and names''')
    group_list = parser_list.add_mutually_exclusive_group(required=True)
    group_list.add_argument(
        '-c', dest='list_categories', action='store_true',
        help='''Show a list of all the categories of ML models found in the
        CURRENT WORKING DIRECTORY''')
    group_list.add_argument(
        '-m', dest='list_models', action='store_true',
        help='''Show a list of all the ML models found in the CURRENT WORKING
        DIRECTORY''')
    group_list.add_argument(
        '-C', dest='list_all_categories',
        action='store_true',
        help=f'''Show a list of all the SUPPORTED categories of ML models found
        in {pymlutils.__name__}''')
    group_list.add_argument(
        '-M', dest='list_all_models',
        action='store_true',
        help=f'''Show a list of all the SUPPORTED ML models found in
        {pymlutils.__name__}''')
    parser_list.set_defaults(func=parse_list_args)
    # ============
    # Train models
    # ============
    # create the parser for the "train" command
    parser_train = subparsers.add_parser('train', help='''Train models''')
    parser_train.add_argument(
        'model_type', choices=['clf', 'reg'],
        default=None,
        help='''The type of models that will be trained where 'clf' is for
            classifier and 'reg' is for regressor''')
    parser_train.add_argument(
        '-c', dest='train_categories', nargs='+',
        metavar='CATEGORY',
        help='''Categories of ML models that will be trained. These correspond
        to sklearn packages of ML models, e.g. ensemble or linear_model. Use
        the subcommand 'list c' to show a list of the categories of ML models
        found in the current working directory.''')
    parser_train.add_argument(
        '-m', dest='train_models', nargs='+',
        metavar='MODEL',
        help='''Names of ML models that will be trained. These correspond to
        sklearn classes of ML models, e.g. SVC or AdaBoostClassifier. It also
        accepts model name abbreviations as shown in the list of ML models
        ('list m').''')
    # TODO: train_type is shown as optional arguments even though it is required
    return parser


def main():
    parser = setup_argparser()
    args = parser.parse_args()

    if args.subparser_name == 'list':
        return args.func(args, is_cwd_ready())
    else:
        main_cfg, cwd_ready = get_main_config()
        return args.func(args, main_cfg, cwd_ready)


if __name__ == '__main__':
    main()
